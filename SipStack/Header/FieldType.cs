using System.Collections.Generic;
using System.Linq;

namespace SipStack.Header
{
    public enum FieldType
    {
        Accept,
        AcceptContact,
        AcceptEncoding,
        AcceptLanguage,
        AcceptResourcePriority,
        AlertInfo,
        Allow,
        AllowEvents,
        AnswerMode,
        AuthenticationInfo,
        Authorization,
        CallId,
        CallInfo,
        Contact,
        ContentDisposition,
        ContentEncoding,
        ContentLanguage,
        ContentLength,
        ContentType,
        Cseq,
        Date,
        Encryption,
        ErrorInfo,
        Event,
        Expires,
        FeatureCaps,
        FlowTimer,
        From,
        Geolocation,
        GeolocationError,
        GeolocationRouting,
        Hide,
        HistoryInfo,
        Identity,
        IdentityInfo,
        InfoPackage,
        InReplyTo,
        Join,
        MaxBreadth,
        MaxForwards,
        MimeVersion,
        MinExpires,
        MinSe,
        Organization,
        PaccessNetworkInfo,
        PanswerState,
        PassertedIdentity,
        PassertedService,
        PassociatedUri,
        PcalledPartyId,
        PchargingFunctionAddresses,
        PchargingVector,
        PdcsTracePartyId,
        PdcsOsps,
        PdcsBillingInfo,
        PdcsLaes,
        PdcsRedirect,
        PearlyMedia,
        PmediaAuthorization,
        PpreferredIdentity,
        PpreferredService,
        PprivateNetworkIndication,
        PprofileKey,
        PrefusedUriList,
        PservedUser,
        PuserDatabase,
        PvisitedNetworkId,
        Path,
        PermissionMissing,
        PolicyContact,
        PolicyId,
        Priority,
        PrivAnswerMode,
        Privacy,
        ProxyAuthenticate,
        ProxyAuthorization,
        ProxyRequire,
        Rack,
        Reason,
        ReasonPhrase,
        RecordRoute,
        RecvInfo,
        ReferEventsAt,
        ReferStub,
        ReferTo,
        ReferredBy,
        RejectContact,
        Replaces,
        ReplyTo,
        RequestDisposition,
        Require,
        ResourcePriority,
        ResponseKey,
        RetryAfter,
        Route,
        Rseq,
        SecurityClient,
        SecurityServer,
        SecurityVerify,
        Server,
        ServiceRoute,
        SessionExpires,
        SessionId,
        SipEtag,
        SipIfMatch,
        Subject,
        SubscriptionState,
        Supported,
        SuppressIfMatch,
        TargetDialog,
        Timestamp,
        To,
        TriggerConstant,
        Unsupported,
        UserAgent,
        UserToUser,
        Via,
        Warning,
        WwwAuthenticate
    }

    public static class HeaderFieldTypeUtils
    {
        private static IDictionary<string, FieldType> StringToType;
        private static IDictionary<FieldType, string> TypeToString;
        private static HashSet<FieldType> HeadersWithOnlyOneValue;

        static HeaderFieldTypeUtils()
        {
            TypeToString = new Dictionary<FieldType, string>
            {
                { FieldType.Accept, "Accept" },
                { FieldType.AcceptContact, "Accept-Contact" },
                { FieldType.AcceptEncoding, "Accept-Encoding" },
                { FieldType.AcceptLanguage, "Accept-Language" },
                { FieldType.AcceptResourcePriority, "Accept-Resource-Priority" },
                { FieldType.AlertInfo, "Alert-Info" },
                { FieldType.Allow, "Allow" },
                { FieldType.AllowEvents, "Allow-Events" },
                { FieldType.AnswerMode, "Answer-Mode" },
                { FieldType.AuthenticationInfo, "Authentication-Info" },
                { FieldType.Authorization, "Authorization" },
                { FieldType.CallId, "Call-ID" },
                { FieldType.CallInfo, "Call-Info" },
                { FieldType.Contact, "Contact" },
                { FieldType.ContentDisposition, "Content-Disposition" },
                { FieldType.ContentEncoding, "Content-Encoding" },
                { FieldType.ContentLanguage, "Content-Language" },
                { FieldType.ContentLength, "Content-Length" },
                { FieldType.ContentType, "Content-Type" },
                { FieldType.Cseq, "CSeq" },
                { FieldType.Date, "Date" },
                { FieldType.Encryption, "Encryption" },
                { FieldType.ErrorInfo, "Error-Info" },
                { FieldType.Event, "Event" },
                { FieldType.Expires, "Expires" },
                { FieldType.FeatureCaps, "Feature-Caps" },
                { FieldType.FlowTimer, "Flow-Timer" },
                { FieldType.From, "From" },
                { FieldType.Geolocation, "Geolocation" },
                { FieldType.GeolocationError, "Geolocation-Error" },
                { FieldType.GeolocationRouting, "Geolocation-Routing" },
                { FieldType.Hide, "Hide" },
                { FieldType.HistoryInfo, "History-Info" },
                { FieldType.Identity, "Identity" },
                { FieldType.IdentityInfo, "Identity-Info" },
                { FieldType.InfoPackage, "Info-Package" },
                { FieldType.InReplyTo, "In-Reply-To" },
                { FieldType.Join, "Join" },
                { FieldType.MaxBreadth, "Max-Breadth" },
                { FieldType.MaxForwards, "Max-Forwards" },
                { FieldType.MimeVersion, "MIME-Version" },
                { FieldType.MinExpires, "Min-Expires" },
                { FieldType.MinSe, "Min-SE" },
                { FieldType.Organization, "Organization" },
                { FieldType.PaccessNetworkInfo, "P-Access-Network-Info" },
                { FieldType.PanswerState, "P-Answer-State" },
                { FieldType.PassertedIdentity, "P-Asserted-Identity" },
                { FieldType.PassertedService, "P-Asserted-Service" },
                { FieldType.PassociatedUri, "P-Associated-URI" },
                { FieldType.PcalledPartyId, "P-Called-Party-ID" },
                { FieldType.PchargingFunctionAddresses, "P-Charging-Function-Addresses" },
                { FieldType.PchargingVector, "P-Charging-Vector" },
                { FieldType.PdcsTracePartyId, "P-DCS-Trace-Party-ID" },
                { FieldType.PdcsOsps, "P-DCS-OSPS" },
                { FieldType.PdcsBillingInfo, "P-DCS-Billing-Info" },
                { FieldType.PdcsLaes, "P-DCS-LAES" },
                { FieldType.PdcsRedirect, "P-DCS-Redirect" },
                { FieldType.PearlyMedia, "P-Early-Media" },
                { FieldType.PmediaAuthorization, "P-Media-Authorization" },
                { FieldType.PpreferredIdentity, "P-Preferred-Identity" },
                { FieldType.PpreferredService, "P-Preferred-Service" },
                { FieldType.PprivateNetworkIndication, "P-Private-Network-Indication" },
                { FieldType.PprofileKey, "P-Profile-Key" },
                { FieldType.PrefusedUriList, "P-Refused-URI-List" },
                { FieldType.PservedUser, "P-Served-User" },
                { FieldType.PuserDatabase, "P-User-Database" },
                { FieldType.PvisitedNetworkId, "P-Visited-Network-ID" },
                { FieldType.Path, "Path" },
                { FieldType.PermissionMissing, "Permission-Missing" },
                { FieldType.PolicyContact, "Policy-Contact" },
                { FieldType.PolicyId, "Policy-ID" },
                { FieldType.Priority, "Priority" },
                { FieldType.PrivAnswerMode, "Priv-Answer-Mode" },
                { FieldType.Privacy, "Privacy" },
                { FieldType.ProxyAuthenticate, "Proxy-Authenticate" },
                { FieldType.ProxyAuthorization, "Proxy-Authorization" },
                { FieldType.ProxyRequire, "Proxy-Require" },
                { FieldType.Rack, "RAck" },
                { FieldType.Reason, "Reason" },
                { FieldType.ReasonPhrase, "Reason-Phrase" },
                { FieldType.RecordRoute, "Record-Route" },
                { FieldType.RecvInfo, "Recv-Info" },
                { FieldType.ReferEventsAt, "Refer-Events-At" },
                { FieldType.ReferStub, "Refer-Sub" },
                { FieldType.ReferTo, "Refer-To" },
                { FieldType.ReferredBy, "Referred-By" },
                { FieldType.RejectContact, "Reject-Contact" },
                { FieldType.Replaces, "Replaces" },
                { FieldType.ReplyTo, "Reply-To" },
                { FieldType.RequestDisposition, "Request-Disposition" },
                { FieldType.Require, "Require" },
                { FieldType.ResourcePriority, "Resource-Priority" },
                { FieldType.ResponseKey, "Response-Key" },
                { FieldType.RetryAfter, "Retry-After" },
                { FieldType.Route, "Route" },
                { FieldType.Rseq, "RSeq" },
                { FieldType.SecurityClient, "Security-Client" },
                { FieldType.SecurityServer, "Security-Server" },
                { FieldType.SecurityVerify, "Security-Verify" },
                { FieldType.Server, "Server" },
                { FieldType.ServiceRoute, "Service-Route" },
                { FieldType.SessionExpires, "Session-Expires" },
                { FieldType.SessionId, "Session-ID" },
                { FieldType.SipEtag, "SIP-ETag" },
                { FieldType.SipIfMatch, "SIP-If-Match" },
                { FieldType.Subject, "Subject" },
                { FieldType.SubscriptionState, "Subscription-State" },
                { FieldType.Supported, "Supported" },
                { FieldType.SuppressIfMatch, "Suppress-If-Match" },
                { FieldType.TargetDialog, "Target-Dialog" },
                { FieldType.Timestamp, "Timestamp" },
                { FieldType.To, "To" },
                { FieldType.TriggerConstant, "Trigger-Consent" },
                { FieldType.Unsupported, "Unsupported" },
                { FieldType.UserAgent, "User-Agent" },
                { FieldType.UserToUser, "User-to-User" },
                { FieldType.Via, "Via" },
                { FieldType.Warning, "Warning" },
                { FieldType.WwwAuthenticate, "WWW-Authenticate" }
            };

            HeadersWithOnlyOneValue = new HashSet<FieldType>
            {
                FieldType.CallId,
                FieldType.ContentLength,
                FieldType.ContentType,
                FieldType.Cseq,
                FieldType.Date,
                FieldType.Expires,
                FieldType.From,
                FieldType.MaxForwards,
                FieldType.SessionId,
                FieldType.To
            };

            StringToType = TypeToString.ToDictionary(x => x.Value.ToLower(), x => x.Key);
        }

        public static bool TryParse(string value, out FieldType requestMethod)
        {
            return StringToType.TryGetValue(value.ToLower(), out requestMethod);
        }

        public static string ToFriendlyString(this FieldType value)
        {
            return TypeToString[value];
        }

        public static bool CanHaveMultipleValues(this FieldType value)
        {
            return !HeadersWithOnlyOneValue.Contains(value);
        }
    }
}
